// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_associate_encryption_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateEncryptionConfigInput,
) {
    if let Some(var_1) = &input.client_request_token {
        object.key("clientRequestToken").string(var_1);
    }
    if let Some(var_2) = &input.encryption_config {
        let mut array_3 = object.key("encryptionConfig").start_array();
        for item_4 in var_2 {
            {
                let mut object_5 = array_3.value().start_object();
                crate::json_ser::serialize_structure_encryption_config(&mut object_5, item_4);
                object_5.finish();
            }
        }
        array_3.finish();
    }
}

pub fn serialize_structure_associate_identity_provider_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::AssociateIdentityProviderConfigInput,
) {
    if let Some(var_6) = &input.client_request_token {
        object.key("clientRequestToken").string(var_6);
    }
    if let Some(var_7) = &input.oidc {
        let mut object_8 = object.key("oidc").start_object();
        crate::json_ser::serialize_structure_oidc_identity_provider_config_request(
            &mut object_8,
            var_7,
        );
        object_8.finish();
    }
    if let Some(var_9) = &input.tags {
        let mut object_10 = object.key("tags").start_object();
        for (key_11, value_12) in var_9 {
            {
                object_10.key(key_11).string(value_12);
            }
        }
        object_10.finish();
    }
}

pub fn serialize_structure_create_addon_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateAddonInput,
) {
    if let Some(var_13) = &input.addon_name {
        object.key("addonName").string(var_13);
    }
    if let Some(var_14) = &input.addon_version {
        object.key("addonVersion").string(var_14);
    }
    if let Some(var_15) = &input.client_request_token {
        object.key("clientRequestToken").string(var_15);
    }
    if let Some(var_16) = &input.resolve_conflicts {
        object.key("resolveConflicts").string(var_16.as_str());
    }
    if let Some(var_17) = &input.service_account_role_arn {
        object.key("serviceAccountRoleArn").string(var_17);
    }
    if let Some(var_18) = &input.tags {
        let mut object_19 = object.key("tags").start_object();
        for (key_20, value_21) in var_18 {
            {
                object_19.key(key_20).string(value_21);
            }
        }
        object_19.finish();
    }
}

pub fn serialize_structure_create_cluster_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateClusterInput,
) {
    if let Some(var_22) = &input.client_request_token {
        object.key("clientRequestToken").string(var_22);
    }
    if let Some(var_23) = &input.encryption_config {
        let mut array_24 = object.key("encryptionConfig").start_array();
        for item_25 in var_23 {
            {
                let mut object_26 = array_24.value().start_object();
                crate::json_ser::serialize_structure_encryption_config(&mut object_26, item_25);
                object_26.finish();
            }
        }
        array_24.finish();
    }
    if let Some(var_27) = &input.kubernetes_network_config {
        let mut object_28 = object.key("kubernetesNetworkConfig").start_object();
        crate::json_ser::serialize_structure_kubernetes_network_config_request(
            &mut object_28,
            var_27,
        );
        object_28.finish();
    }
    if let Some(var_29) = &input.logging {
        let mut object_30 = object.key("logging").start_object();
        crate::json_ser::serialize_structure_logging(&mut object_30, var_29);
        object_30.finish();
    }
    if let Some(var_31) = &input.name {
        object.key("name").string(var_31);
    }
    if let Some(var_32) = &input.resources_vpc_config {
        let mut object_33 = object.key("resourcesVpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config_request(&mut object_33, var_32);
        object_33.finish();
    }
    if let Some(var_34) = &input.role_arn {
        object.key("roleArn").string(var_34);
    }
    if let Some(var_35) = &input.tags {
        let mut object_36 = object.key("tags").start_object();
        for (key_37, value_38) in var_35 {
            {
                object_36.key(key_37).string(value_38);
            }
        }
        object_36.finish();
    }
    if let Some(var_39) = &input.version {
        object.key("version").string(var_39);
    }
}

pub fn serialize_structure_create_fargate_profile_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateFargateProfileInput,
) {
    if let Some(var_40) = &input.client_request_token {
        object.key("clientRequestToken").string(var_40);
    }
    if let Some(var_41) = &input.fargate_profile_name {
        object.key("fargateProfileName").string(var_41);
    }
    if let Some(var_42) = &input.pod_execution_role_arn {
        object.key("podExecutionRoleArn").string(var_42);
    }
    if let Some(var_43) = &input.selectors {
        let mut array_44 = object.key("selectors").start_array();
        for item_45 in var_43 {
            {
                let mut object_46 = array_44.value().start_object();
                crate::json_ser::serialize_structure_fargate_profile_selector(
                    &mut object_46,
                    item_45,
                );
                object_46.finish();
            }
        }
        array_44.finish();
    }
    if let Some(var_47) = &input.subnets {
        let mut array_48 = object.key("subnets").start_array();
        for item_49 in var_47 {
            {
                array_48.value().string(item_49);
            }
        }
        array_48.finish();
    }
    if let Some(var_50) = &input.tags {
        let mut object_51 = object.key("tags").start_object();
        for (key_52, value_53) in var_50 {
            {
                object_51.key(key_52).string(value_53);
            }
        }
        object_51.finish();
    }
}

pub fn serialize_structure_create_nodegroup_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::CreateNodegroupInput,
) {
    if let Some(var_54) = &input.ami_type {
        object.key("amiType").string(var_54.as_str());
    }
    if let Some(var_55) = &input.capacity_type {
        object.key("capacityType").string(var_55.as_str());
    }
    if let Some(var_56) = &input.client_request_token {
        object.key("clientRequestToken").string(var_56);
    }
    if let Some(var_57) = &input.disk_size {
        object.key("diskSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_57).into()),
        );
    }
    if let Some(var_58) = &input.instance_types {
        let mut array_59 = object.key("instanceTypes").start_array();
        for item_60 in var_58 {
            {
                array_59.value().string(item_60);
            }
        }
        array_59.finish();
    }
    if let Some(var_61) = &input.labels {
        let mut object_62 = object.key("labels").start_object();
        for (key_63, value_64) in var_61 {
            {
                object_62.key(key_63).string(value_64);
            }
        }
        object_62.finish();
    }
    if let Some(var_65) = &input.launch_template {
        let mut object_66 = object.key("launchTemplate").start_object();
        crate::json_ser::serialize_structure_launch_template_specification(&mut object_66, var_65);
        object_66.finish();
    }
    if let Some(var_67) = &input.node_role {
        object.key("nodeRole").string(var_67);
    }
    if let Some(var_68) = &input.nodegroup_name {
        object.key("nodegroupName").string(var_68);
    }
    if let Some(var_69) = &input.release_version {
        object.key("releaseVersion").string(var_69);
    }
    if let Some(var_70) = &input.remote_access {
        let mut object_71 = object.key("remoteAccess").start_object();
        crate::json_ser::serialize_structure_remote_access_config(&mut object_71, var_70);
        object_71.finish();
    }
    if let Some(var_72) = &input.scaling_config {
        let mut object_73 = object.key("scalingConfig").start_object();
        crate::json_ser::serialize_structure_nodegroup_scaling_config(&mut object_73, var_72);
        object_73.finish();
    }
    if let Some(var_74) = &input.subnets {
        let mut array_75 = object.key("subnets").start_array();
        for item_76 in var_74 {
            {
                array_75.value().string(item_76);
            }
        }
        array_75.finish();
    }
    if let Some(var_77) = &input.tags {
        let mut object_78 = object.key("tags").start_object();
        for (key_79, value_80) in var_77 {
            {
                object_78.key(key_79).string(value_80);
            }
        }
        object_78.finish();
    }
    if let Some(var_81) = &input.taints {
        let mut array_82 = object.key("taints").start_array();
        for item_83 in var_81 {
            {
                let mut object_84 = array_82.value().start_object();
                crate::json_ser::serialize_structure_taint(&mut object_84, item_83);
                object_84.finish();
            }
        }
        array_82.finish();
    }
    if let Some(var_85) = &input.update_config {
        let mut object_86 = object.key("updateConfig").start_object();
        crate::json_ser::serialize_structure_nodegroup_update_config(&mut object_86, var_85);
        object_86.finish();
    }
    if let Some(var_87) = &input.version {
        object.key("version").string(var_87);
    }
}

pub fn serialize_structure_describe_identity_provider_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DescribeIdentityProviderConfigInput,
) {
    if let Some(var_88) = &input.identity_provider_config {
        let mut object_89 = object.key("identityProviderConfig").start_object();
        crate::json_ser::serialize_structure_identity_provider_config(&mut object_89, var_88);
        object_89.finish();
    }
}

pub fn serialize_structure_disassociate_identity_provider_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::DisassociateIdentityProviderConfigInput,
) {
    if let Some(var_90) = &input.client_request_token {
        object.key("clientRequestToken").string(var_90);
    }
    if let Some(var_91) = &input.identity_provider_config {
        let mut object_92 = object.key("identityProviderConfig").start_object();
        crate::json_ser::serialize_structure_identity_provider_config(&mut object_92, var_91);
        object_92.finish();
    }
}

pub fn serialize_structure_tag_resource_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::TagResourceInput,
) {
    if let Some(var_93) = &input.tags {
        let mut object_94 = object.key("tags").start_object();
        for (key_95, value_96) in var_93 {
            {
                object_94.key(key_95).string(value_96);
            }
        }
        object_94.finish();
    }
}

pub fn serialize_structure_update_addon_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateAddonInput,
) {
    if let Some(var_97) = &input.addon_version {
        object.key("addonVersion").string(var_97);
    }
    if let Some(var_98) = &input.client_request_token {
        object.key("clientRequestToken").string(var_98);
    }
    if let Some(var_99) = &input.resolve_conflicts {
        object.key("resolveConflicts").string(var_99.as_str());
    }
    if let Some(var_100) = &input.service_account_role_arn {
        object.key("serviceAccountRoleArn").string(var_100);
    }
}

pub fn serialize_structure_update_cluster_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateClusterConfigInput,
) {
    if let Some(var_101) = &input.client_request_token {
        object.key("clientRequestToken").string(var_101);
    }
    if let Some(var_102) = &input.logging {
        let mut object_103 = object.key("logging").start_object();
        crate::json_ser::serialize_structure_logging(&mut object_103, var_102);
        object_103.finish();
    }
    if let Some(var_104) = &input.resources_vpc_config {
        let mut object_105 = object.key("resourcesVpcConfig").start_object();
        crate::json_ser::serialize_structure_vpc_config_request(&mut object_105, var_104);
        object_105.finish();
    }
}

pub fn serialize_structure_update_cluster_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateClusterVersionInput,
) {
    if let Some(var_106) = &input.client_request_token {
        object.key("clientRequestToken").string(var_106);
    }
    if let Some(var_107) = &input.version {
        object.key("version").string(var_107);
    }
}

pub fn serialize_structure_update_nodegroup_config_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateNodegroupConfigInput,
) {
    if let Some(var_108) = &input.client_request_token {
        object.key("clientRequestToken").string(var_108);
    }
    if let Some(var_109) = &input.labels {
        let mut object_110 = object.key("labels").start_object();
        crate::json_ser::serialize_structure_update_labels_payload(&mut object_110, var_109);
        object_110.finish();
    }
    if let Some(var_111) = &input.scaling_config {
        let mut object_112 = object.key("scalingConfig").start_object();
        crate::json_ser::serialize_structure_nodegroup_scaling_config(&mut object_112, var_111);
        object_112.finish();
    }
    if let Some(var_113) = &input.taints {
        let mut object_114 = object.key("taints").start_object();
        crate::json_ser::serialize_structure_update_taints_payload(&mut object_114, var_113);
        object_114.finish();
    }
    if let Some(var_115) = &input.update_config {
        let mut object_116 = object.key("updateConfig").start_object();
        crate::json_ser::serialize_structure_nodegroup_update_config(&mut object_116, var_115);
        object_116.finish();
    }
}

pub fn serialize_structure_update_nodegroup_version_input(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::input::UpdateNodegroupVersionInput,
) {
    if let Some(var_117) = &input.client_request_token {
        object.key("clientRequestToken").string(var_117);
    }
    if input.force {
        object.key("force").boolean(input.force);
    }
    if let Some(var_118) = &input.launch_template {
        let mut object_119 = object.key("launchTemplate").start_object();
        crate::json_ser::serialize_structure_launch_template_specification(
            &mut object_119,
            var_118,
        );
        object_119.finish();
    }
    if let Some(var_120) = &input.release_version {
        object.key("releaseVersion").string(var_120);
    }
    if let Some(var_121) = &input.version {
        object.key("version").string(var_121);
    }
}

pub fn serialize_structure_encryption_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::EncryptionConfig,
) {
    if let Some(var_122) = &input.resources {
        let mut array_123 = object.key("resources").start_array();
        for item_124 in var_122 {
            {
                array_123.value().string(item_124);
            }
        }
        array_123.finish();
    }
    if let Some(var_125) = &input.provider {
        let mut object_126 = object.key("provider").start_object();
        crate::json_ser::serialize_structure_provider(&mut object_126, var_125);
        object_126.finish();
    }
}

pub fn serialize_structure_oidc_identity_provider_config_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::OidcIdentityProviderConfigRequest,
) {
    if let Some(var_127) = &input.identity_provider_config_name {
        object.key("identityProviderConfigName").string(var_127);
    }
    if let Some(var_128) = &input.issuer_url {
        object.key("issuerUrl").string(var_128);
    }
    if let Some(var_129) = &input.client_id {
        object.key("clientId").string(var_129);
    }
    if let Some(var_130) = &input.username_claim {
        object.key("usernameClaim").string(var_130);
    }
    if let Some(var_131) = &input.username_prefix {
        object.key("usernamePrefix").string(var_131);
    }
    if let Some(var_132) = &input.groups_claim {
        object.key("groupsClaim").string(var_132);
    }
    if let Some(var_133) = &input.groups_prefix {
        object.key("groupsPrefix").string(var_133);
    }
    if let Some(var_134) = &input.required_claims {
        let mut object_135 = object.key("requiredClaims").start_object();
        for (key_136, value_137) in var_134 {
            {
                object_135.key(key_136).string(value_137);
            }
        }
        object_135.finish();
    }
}

pub fn serialize_structure_kubernetes_network_config_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::KubernetesNetworkConfigRequest,
) {
    if let Some(var_138) = &input.service_ipv4_cidr {
        object.key("serviceIpv4Cidr").string(var_138);
    }
}

pub fn serialize_structure_logging(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Logging,
) {
    if let Some(var_139) = &input.cluster_logging {
        let mut array_140 = object.key("clusterLogging").start_array();
        for item_141 in var_139 {
            {
                let mut object_142 = array_140.value().start_object();
                crate::json_ser::serialize_structure_log_setup(&mut object_142, item_141);
                object_142.finish();
            }
        }
        array_140.finish();
    }
}

pub fn serialize_structure_vpc_config_request(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::VpcConfigRequest,
) {
    if let Some(var_143) = &input.subnet_ids {
        let mut array_144 = object.key("subnetIds").start_array();
        for item_145 in var_143 {
            {
                array_144.value().string(item_145);
            }
        }
        array_144.finish();
    }
    if let Some(var_146) = &input.security_group_ids {
        let mut array_147 = object.key("securityGroupIds").start_array();
        for item_148 in var_146 {
            {
                array_147.value().string(item_148);
            }
        }
        array_147.finish();
    }
    if let Some(var_149) = &input.endpoint_public_access {
        object.key("endpointPublicAccess").boolean(*var_149);
    }
    if let Some(var_150) = &input.endpoint_private_access {
        object.key("endpointPrivateAccess").boolean(*var_150);
    }
    if let Some(var_151) = &input.public_access_cidrs {
        let mut array_152 = object.key("publicAccessCidrs").start_array();
        for item_153 in var_151 {
            {
                array_152.value().string(item_153);
            }
        }
        array_152.finish();
    }
}

pub fn serialize_structure_fargate_profile_selector(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::FargateProfileSelector,
) {
    if let Some(var_154) = &input.namespace {
        object.key("namespace").string(var_154);
    }
    if let Some(var_155) = &input.labels {
        let mut object_156 = object.key("labels").start_object();
        for (key_157, value_158) in var_155 {
            {
                object_156.key(key_157).string(value_158);
            }
        }
        object_156.finish();
    }
}

pub fn serialize_structure_launch_template_specification(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LaunchTemplateSpecification,
) {
    if let Some(var_159) = &input.name {
        object.key("name").string(var_159);
    }
    if let Some(var_160) = &input.version {
        object.key("version").string(var_160);
    }
    if let Some(var_161) = &input.id {
        object.key("id").string(var_161);
    }
}

pub fn serialize_structure_remote_access_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::RemoteAccessConfig,
) {
    if let Some(var_162) = &input.ec2_ssh_key {
        object.key("ec2SshKey").string(var_162);
    }
    if let Some(var_163) = &input.source_security_groups {
        let mut array_164 = object.key("sourceSecurityGroups").start_array();
        for item_165 in var_163 {
            {
                array_164.value().string(item_165);
            }
        }
        array_164.finish();
    }
}

pub fn serialize_structure_nodegroup_scaling_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NodegroupScalingConfig,
) {
    if let Some(var_166) = &input.min_size {
        object.key("minSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_166).into()),
        );
    }
    if let Some(var_167) = &input.max_size {
        object.key("maxSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_167).into()),
        );
    }
    if let Some(var_168) = &input.desired_size {
        object.key("desiredSize").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_168).into()),
        );
    }
}

pub fn serialize_structure_taint(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Taint,
) {
    if let Some(var_169) = &input.key {
        object.key("key").string(var_169);
    }
    if let Some(var_170) = &input.value {
        object.key("value").string(var_170);
    }
    if let Some(var_171) = &input.effect {
        object.key("effect").string(var_171.as_str());
    }
}

pub fn serialize_structure_nodegroup_update_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::NodegroupUpdateConfig,
) {
    if let Some(var_172) = &input.max_unavailable {
        object.key("maxUnavailable").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_172).into()),
        );
    }
    if let Some(var_173) = &input.max_unavailable_percentage {
        object.key("maxUnavailablePercentage").number(
            #[allow(clippy::useless_conversion)]
            smithy_types::Number::NegInt((*var_173).into()),
        );
    }
}

pub fn serialize_structure_identity_provider_config(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::IdentityProviderConfig,
) {
    if let Some(var_174) = &input.r#type {
        object.key("type").string(var_174);
    }
    if let Some(var_175) = &input.name {
        object.key("name").string(var_175);
    }
}

pub fn serialize_structure_update_labels_payload(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateLabelsPayload,
) {
    if let Some(var_176) = &input.add_or_update_labels {
        let mut object_177 = object.key("addOrUpdateLabels").start_object();
        for (key_178, value_179) in var_176 {
            {
                object_177.key(key_178).string(value_179);
            }
        }
        object_177.finish();
    }
    if let Some(var_180) = &input.remove_labels {
        let mut array_181 = object.key("removeLabels").start_array();
        for item_182 in var_180 {
            {
                array_181.value().string(item_182);
            }
        }
        array_181.finish();
    }
}

pub fn serialize_structure_update_taints_payload(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::UpdateTaintsPayload,
) {
    if let Some(var_183) = &input.add_or_update_taints {
        let mut array_184 = object.key("addOrUpdateTaints").start_array();
        for item_185 in var_183 {
            {
                let mut object_186 = array_184.value().start_object();
                crate::json_ser::serialize_structure_taint(&mut object_186, item_185);
                object_186.finish();
            }
        }
        array_184.finish();
    }
    if let Some(var_187) = &input.remove_taints {
        let mut array_188 = object.key("removeTaints").start_array();
        for item_189 in var_187 {
            {
                let mut object_190 = array_188.value().start_object();
                crate::json_ser::serialize_structure_taint(&mut object_190, item_189);
                object_190.finish();
            }
        }
        array_188.finish();
    }
}

pub fn serialize_structure_provider(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::Provider,
) {
    if let Some(var_191) = &input.key_arn {
        object.key("keyArn").string(var_191);
    }
}

pub fn serialize_structure_log_setup(
    object: &mut smithy_json::serialize::JsonObjectWriter,
    input: &crate::model::LogSetup,
) {
    if let Some(var_192) = &input.types {
        let mut array_193 = object.key("types").start_array();
        for item_194 in var_192 {
            {
                array_193.value().string(item_194.as_str());
            }
        }
        array_193.finish();
    }
    if let Some(var_195) = &input.enabled {
        object.key("enabled").boolean(*var_195);
    }
}
